/**
 * @author bush & perry.
 * @description Original by bush & fully remade by perry. This is the best anarchy Gradle sad that retarded 13-14 yr OyVey skidders can't come close to comparing -perry.
 */
//file:noinspection GroovyAssignabilityCheck I don't like warnings!!!! fuck you!!!
//file:noinspection GroovyUnusedAssignment I don't like warnings!!!! fuck you!!!

buildscript {
    ext.kotlin_version = '1.7.10'

    repositories {
        mavenCentral()

        maven { url 'https://repo.spongepowered.org/maven' }
        maven { url 'https://files.minecraftforge.net/maven' }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.+'
        classpath 'gradle.plugin.de.fuerstenau:BuildConfigPlugin:1.1.4'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'de.fuerstenau.buildconfig'

version = '1.0.0'
group = 'wtf.nebula'
archivesBaseName = 'Nebula'

def getGitHash = { ->
    try {
        def stdout = new ByteArrayOutputStream()

        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }

        return stdout.toString().trim()
    } catch (ignored) {
        return "no-git"
    }
}

buildConfig {
    buildConfigField "String", "HASH", "${getGitHash()}"
    buildConfigField "String", "VERSION", "${project.version}"

    packageName "wtf.nebula.util.versioning"
}

sourceSets.main.java.srcDirs += "build/gen/buildconfig/src/main"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
    options.encoding 'UTF-8'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    mavenCentral()

    maven {
        url 'https://libraries.minecraft.net'
    }

    maven {
        name = "jitpack.io"
        url = "https://jitpack.io"
    }
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'
    // makeObfSourceJar = false

    accessTransformer = file('src/main/resources/nebula_at.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.coreMods.load', 'wtf.nebula.asm.NebulaLoadingPlugin'
        }
    }
}

configurations {
    embed
    implementation.extendsFrom embed

    // lil bit of kami-blue macOS compatibility
    all {
        resolutionStrategy {
            force 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:1.12.2-14.23.5.2860"

    embed "com.mojang:brigadier:1.0.18"
    embed "com.github.therealbush:eventbus-kotlin:v1.0.1"

    embed "com.github.litarvan:OpenAuth:1.1.2"

    // stupid kotlin shit
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.2'
}

processResources {
    inputs.property 'version', project.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        // Replace version.
        expand 'version': project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {
    from(configurations.embed.collect {
        it.isDirectory() ? it : zipTree(it)
    }) {
        exclude 'dummyThing',
                'LICENSE.txt',
                'META-INF/MUMFREY.RSA',
                'META-INF/maven/**',
                'org/**/*.html'
    }

    manifest.attributes(
            'FMLCorePlugin': 'wtf.nebula.asm.NebulaLoadingPlugin',
            'FMLCorePluginContainsFMLMod': 'true',
            'ForceLoadAsMod': 'true',
            'FMLAT': 'nebula_at.cfg'
    )
}