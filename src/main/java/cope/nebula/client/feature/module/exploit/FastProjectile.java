package cope.nebula.client.feature.module.exploit;

import cope.nebula.client.events.PacketEvent;
import cope.nebula.client.events.PacketEvent.Direction;
import cope.nebula.client.feature.module.Module;
import cope.nebula.client.feature.module.ModuleCategory;
import cope.nebula.client.value.Value;
import cope.nebula.util.internal.math.Vec2d;
import cope.nebula.util.world.entity.player.MotionUtil;
import net.minecraft.init.Items;
import net.minecraft.item.*;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketPlayer.Position;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerDigging.Action;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import scala.Int;

public class FastProjectile extends Module {
    public FastProjectile() {
        super("FastProjectile", ModuleCategory.EXPLOIT, "makes projectiles go vroom");
    }

    public static final Value<Boolean> bows = new Value<>("Bows", true);
    public static final Value<Boolean> eggs = new Value<>("Eggs", true);
    public static final Value<Boolean> pearls = new Value<>("Pearls", true);
    public static final Value<Boolean> snowballs = new Value<>("Snowballs", true);

    public static final Value<Boolean> release = new Value<>("Release", true);
    public static final Value<Integer> charge = new Value<>("Charge", 20, 3, 20);
    public static final Value<Double> boost = new Value<>("Boost", 2.0, 0.1, 100.0);
    public static final Value<Integer> timeout = new Value<>("timeout", 5000, 1000, 15000);

    private long lastShotTime;
    private boolean flag = false;

    @Override
    protected void onDeactivated() {
        flag = false;
    }

    @Override
    protected void onActivated() {
        lastShotTime = System.currentTimeMillis();
    }

    @Override
    public String getDisplayInfo() {
        if (mc.player.isHandActive()) {
            return flag ? "Charged" : "Charging";
        }

        return super.getDisplayInfo();
    }

    public void shoot() {
        mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_SPRINTING));

        Vec2d motion = MotionUtil.strafe(boost.getValue());

        if (mc.player.ticksExisted % 2 == 0) {
            mc.player.connection.sendPacket(new Position(mc.player.posX - motion.getX(), mc.player.posY, mc.player.posZ - motion.getZ(), mc.player.onGround));
            mc.player.connection.sendPacket(new Position(mc.player.posX + motion.getX(), mc.player.posY, mc.player.posZ + motion.getZ(), mc.player.onGround));
        } else {
            mc.player.connection.sendPacket(new Position(mc.player.posX + motion.getX(), mc.player.posY, mc.player.posZ + motion.getZ(), mc.player.onGround));
            mc.player.connection.sendPacket(new Position(mc.player.posX - motion.getX(), mc.player.posY, mc.player.posZ - motion.getZ(), mc.player.onGround));
        }
    }

    @Override
    public void onTick() {
        if (!nullCheck()) {
            if (mc.player.isHandActive() &&
                    mc.player.getActiveItemStack().getItem().equals(Items.BOW) || mc.player.getActiveItemStack().getItem().equals(Items.ENDER_PEARL) &&
                    mc.player.getItemInUseMaxCount() >= charge.getValue()) {

                flag = true;

                if (release.getValue()) {
                    mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.RELEASE_USE_ITEM, BlockPos.ORIGIN, EnumFacing.DOWN));
                    mc.player.stopActiveHand();
                }
            } else {
                flag = false;
            }
        }
    }

    @SubscribeEvent
    public void onPacket(PacketEvent event) {
        if (System.currentTimeMillis() - lastShotTime >= timeout.getValue()) {
            lastShotTime = System.currentTimeMillis();
            if (!nullCheck()) {
                ItemStack handStack = mc.player.getHeldItem(EnumHand.MAIN_HAND);

                if (event.getPacket() instanceof CPacketPlayerDigging && bows.getValue()) {
                    if (!handStack.isEmpty()) {
                        handStack.getItem();
                        if (handStack.getItem() instanceof ItemBow) {
                            shoot();
                        }
                    }

                } else if (event.getPacket() instanceof CPacketPlayerTryUseItem) {
                    if (!handStack.isEmpty()) {
                        handStack.getItem();
                        if (handStack.getItem() instanceof ItemEgg && eggs.getValue()) {
                            shoot();
                        } else if (handStack.getItem() instanceof ItemEnderPearl && pearls.getValue()) {
                            shoot();
                        } else if (handStack.getItem() instanceof ItemSnowball && snowballs.getValue()) {
                            shoot();
                        }
                    }
                }
            }

        }
    }
}
